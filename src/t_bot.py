#!/bin/env python3



########################################################################################################
##                                                                                                    ##
##                                                                                                    ##
##                            .S_SSSs     .S_sSSs     .S_sSSs     .S_SSSs                             ##
##                           .SS~SSSSS   .SS~YS%%b   .SS~YS%%b   .SS~SSSSS                            ##
##                           S%S   SSSS  S%S   `S%b  S%S   `S%b  S%S   SSSS                           ##
##                           S%S    S%S  S%S    S%S  S%S    S%S  S%S    S%S                           ##
##                           S%S SSSS%S  S%S    S&S  S%S    S&S  S%S SSSS%S                           ##
##                           S&S  SSS%S  S&S    S&S  S&S    S&S  S&S  SSS%S                           ##
##                           S&S    S&S  S&S    S&S  S&S    S&S  S&S    S&S                           ##
##                           S&S    S&S  S&S    S&S  S&S    S&S  S&S    S&S                           ##
##                           S*S    S&S  S*S    S*S  S*S    S*S  S*S    S&S                           ##
##                           S*S    S*S  S*S    S*S  S*S    S*S  S*S    S*S                           ##
##                           S*S    S*S  S*S    S*S  S*S    S*S  S*S    S*S                           ##
##                           SSS    S*S  S*S    SSS  S*S    SSS  SSS    S*S                           ##
##                                  SP   SP          SP                 SP                            ##
##                                  Y    Y           Y                  Y                             ##
##                                                                                                    ##
##                                                                                                    ##
##                                                                                                    ##
##                                                                                                    ##
##                                                                                                    ##
########################################################################################################




from cgi import print_form
from cgitb import text
import time
from tokenize import group
from typing import Text
# from notification import notification, notification_5
from pickle import TRUE
import telebot
import schedule
from telebot import types
import datetime
import sqlite3
from datetime import timedelta
# from lessons import lesson1_evening, lesson2_evening



### –í–í–û–î–ò–ú –¢–û–ö–ï–ù –ù–ê–®–ï–ì–û –ë–û–¢–ê
bot = telebot.TeleBot("5620314916:AAFd2NaaCj02H8Nwek38Rb_ugKZdpqlERe4")


## –ù–ê–ü–û–ú–ò–ù–ê–õ–ö–ò (–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–∫–∞ —á—Ç–æ)


# –°—á–∏—Ç–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏
# difference_of_time = lesson1_evening - timedelta(hours=datetime.datetime.now().hour, minutes=datetime.datetime.now().minute)


# –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, —á—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞
conn = sqlite3.connect(r'database/chats.db', check_same_thread=True)
db = conn.cursor()
db.execute("SELECT id from chats;")
id = db.fetchall()
conn.close()

# def send_notification():
#     for count in id:
#         bot.send_message(int(count[0]), notification())

# def notification_at_12():
#     for count in id:
#         bot.send_message(int(count[0]), notification())


# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–ª–æ–∫
# schedule.every(1).seconds.do(send_notification)
# schedule.every().day.at('12:00').do(notification_at_12)

# –ó–∞–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ü–æ–∫–∞ —á—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
# schedule.run_pending()




## –ü–†–ò–í–ï–¢–°–¢–í–ò–ï –ü–†–ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ò
@bot.message_handler(commands=['start'])
def start(message):

    # –ü–æ–ª—É—á–∞–µ–º id —á–∞—Ç–∞ 
    chat_id = int(message.chat.id)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    name = message.from_user.first_name

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(r'database/chats.db', check_same_thread=True)
    db = conn.cursor()
    db.execute("SELECT * from chats;")
    chat = db.fetchall()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º chat.id –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    flag = True
    print(name)    
    while flag == True:
        for id in chat:
            if int(id[0]) == int(chat_id):
                print(f'{id[0]} = {chat_id}')
                flag = False
                break
            else:
                print(f'{id[0]} != {chat_id}')
                print('FALSE')


        # –ë–æ—Ç –Ω–µ –Ω–∞—à–µ–ª chat_id —É —Å–µ–±—è, –∑–Ω–∞—á–∏—Ç –µ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å 
        if flag == True:
            db.execute(f"INSERT INTO chats ('id') VALUES ('{chat_id}');")
            conn.commit()
            conn.close()
            print(f"INSERT INTO chats ('id') VALUES ('{chat_id}');")
            markup1 = types.InlineKeyboardMarkup()
            vbITS_2 = types.InlineKeyboardButton("2–≤–±–ò–¢–°", callback_data='2vbITS')
            vbASU_2 = types.InlineKeyboardButton("2–≤–±–ê–°–£", callback_data='2vbASU')

            markup1.add(vbITS_2, vbASU_2)

            say_hello = "–Ø –≤–∏–∂—É —Ç—ã —É –Ω–∞—Å –≤–ø–µ—Ä–≤—ã–µ)\n–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è. –Ø - –ê–Ω–Ω–∞. –ú–µ–Ω—è —Å–æ–∑–¥–∞–ª–∏ –≤ –ø–æ–º–æ—â—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º. –ò–∑ –∫–∞–∫–æ–π —Ç—ã –≥—Ä—É–ø–ø—ã?"
            bot.send_message(message.chat.id, say_hello, reply_markup=markup1)       
            flag = False

    time.sleep(4)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    sticker = open('../stickers/hello1.webp', 'rb')
    gen_Hello = f'<b>–ü—Ä–∏–≤–µ—Ç, {name}.</b>\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞. –Ø –≤–∞—à –≥–ª–∞–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∏–Ω—Å—Ç–∏—Ç—É—Ç–µ. ' \
                f'–Ø –±—ã—Å—Ç—Ä–æ —É—á—É—Å—å –∏ –æ—á–µ–Ω—å —Å–∫–æ—Ä–æ —Å–º–æ–≥—É –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.'

    # –ò–Ω–∏–∑–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("/help")
    btn2 = types.KeyboardButton("/timetable")
    markup.add(btn1, btn2)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    bot.send_sticker(message.chat.id, sticker)
    bot.send_message(message.chat.id, gen_Hello, parse_mode='html', reply_markup=markup)  # (–∫–æ–º—É. —á—Ç–æ. –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)    schedule.run_pending()




## –ü–û–ú–û–©–¨ –ë–û–¢–ê –ü–†–ò –ó–ê–ü–†–û–°–ï
@bot.message_handler(commands=['help'])
def help(message):
    name = message.from_user.first_name
    gen_Help = f'<b>{name}</b>, –º–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ –≤–µ–ª–∏–∫ üôÑ, –Ω–æ –≤—Å–µ –∂–µ —á—Ç–æ-—Ç–æ —è —É–º–µ—é üòè\n' \
                f'1. –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö –∏ –æ—Ç—Å—ã–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ üòâ\n' \
                f'2. –Ø –∑–Ω–∞—é —Ç–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üïñ' 
    bot.send_message(message.chat.id, gen_Help, parse_mode='html')




## –í–´–í–û–î –†–ê–°–ü–ò–°–ê–ù–ò–Ø –ü–†–ò –ó–ê–ü–†–û–°–ï
@bot.message_handler(commands=['timetable'])
def timetable(message):

    chat_id = message.chat.id

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    def what_is_group(id):
        conn = sqlite3.connect(r'database/chats.db', check_same_thread=True)
        db = conn.cursor()
        db.execute(f"SELECT group_name from chats where id = {id};")
        group = db.fetchone()
        conn.close()
        return group[0]



    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ç–Ω–æ—Å—Ç–∏ –∏ –Ω–µ—á–µ—Ç–Ω–æ—Å—Ç–∏ –Ω–µ–¥–µ–ª–∏
    def what_is_day():
        if int(datetime.datetime.now().strftime('%W')) % 2 == 0:
            return 2
        else:
            return 1

    # –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    def week_day(tt_info):
        if tt_info == 1:
            week_day = '–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö'
        elif tt_info == 2:
            week_day = '–í–¢–û–†–ù–ò–ö'
        elif tt_info == 3:
            week_day = '–°–†–ï–î–ê'
        elif tt_info == 4:
            week_day = '–ß–ï–¢–í–ï–†–ì'
        elif tt_info == 5:
            week_day = '–ü–Ø–¢–ù–ò–¶–ê'
        elif tt_info == 6:
            week_day = '–°–£–ë–ë–û–¢–ê'
        elif tt_info == 7:
            week_day = '–í–û–°–ö–†–ï–°–ï–ù–¨–ï'
        return week_day

    # –í—ã–≤–æ–¥ —á–µ—Ç–Ω–æ–π –∏–ª–∏ –Ω–µ—á–µ—Ç–Ω–æ–π –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
    def print_message_week(week):
        if week == 2:
            return '–ó–ù–ê–ú–ï–ù–ê–¢–ï–õ–¨'
        else:
            return '–ß–ò–°–õ–ò–¢–ï–õ–¨'

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —á–µ—Ç–Ω—ã—Ö –Ω–µ–¥–µ–ª—å
    def check_honest():
        return datetime.datetime.now().isoweekday()

    # –î–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
    if what_is_group(chat_id) == "NONE":
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É!üò°")
    else:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–¥ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
        conn = sqlite3.connect(r'database/timetable.db')
        db = conn.cursor()

        db.execute(f"SELECT * from '{what_is_group(chat_id)}' where week_day = {datetime.datetime.today().isoweekday()};")
        tt_info = db.fetchall()
        
        for i in tt_info:
            db.execute(f"SELECT name FROM parity_settings where id = {i[3]}")
            parity = db.fetchone()[0]
            print(week_day((datetime.datetime.today().isoweekday())))
        
        print(check_honest())
       



        # markup = types.InlineKeyboardMarkup()
        # btn1 = types.InlineKeyboardButton(f'1Ô∏è‚É£', callback_data=f'{first_lesson[1]}')
        # btn2 = types.InlineKeyboardButton(f'2Ô∏è‚É£', callback_data=f'{second_lesson[1]}')
        # markup.add(btn1)
        # markup.add(btn2)


        # notification_of_lesson = f'{print_message_week(what_is_day())}\n{week_day}\n\n1. {first_lesson[1]}\n    {first_lesson[3]}\n    {first_lesson[2]}\n\n2. {second_lesson[1]}\n    {second_lesson[3]}\n    {second_lesson[2]}'
        # bot.send_message(message.chat.id, str(all))
        # print(first_lesson[1], second_lesson[1])
        # bot.send_message(message.chat.id, "–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø–æ —ç—Ç–∏–º –ø–∞—Ä–∞–ºüëá", reply_markup=markup)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã–π —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler()
def get_info(message):

    def what_is_day():
        if int(datetime.datetime.now().strftime('%W')) % 2 == 0:
            return 'honest_week'
        else:
            return 'odd_week'

    # –í—ã–≤–æ–¥ –∏–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–Ω—ã–µ 
    name = message.from_user.first_name
    send_message = message.text

    # –°–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç –ø–æ–Ω–∏–º–∞–µ—Ç
    hello = {'–ü—Ä–∏–≤–µ—Ç', '–ó–¥–∞—Ä–æ–≤–∞', 'Hello', '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π'}
    how_are_you = {'–ö–∞–∫ —Ç—ã?', '–∫–∞–∫ —Ç—ã?', '–ö–∞–∫ —Ç—ã', '–∫–∞–∫ —Ç—ã', '–ö–∞–∫ –¥–µ–ª–∞?', '–∫–∞–∫ –¥–µ–ª–∞?', '–∫–∞–∫ –¥–µ–ª–∞', '–ö–∞–∫ –¥–µ–ª–∞'}

    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if send_message in hello:
        bot.send_message(message.chat.id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {name}!', parse_mode='html')
    
    elif send_message in how_are_you:
        bot.send_message(message.chat.id, f'–•–æ—Ä–æ—à–æ, –∞ –≤—ã –∫–∞–∫?', parse_mode='html')


    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é (–ú–∞—Ä–∫ –¶—ã—Å—å –æ–±–µ—â–∞–ª —Å–¥–µ–ª–∞—Ç—å...)
    elif send_message in '–ü–æ–∫–∞–∂–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é':

        # –°–º–æ—Ç—Ä–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö 
        conn = sqlite3.connect(r'database/timetable.db')
        db = conn.cursor()
        db.execute(f"SELECT week_day, {what_is_day()}, start_time from '2vbASU';")
        all = db.fetchall()
        print(all)
        conn.close()


        # –†–∞—Å–ø–∞—Ä—Å–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –Ω–µ–¥–µ–ª–∏, –ø–∞—Ä—ã, –∏ –≤—Ä–µ–º—è
        week = []
        lesson = []
        time = []
        for timetable in all:
            week.append(timetable[0])
            lesson.append(timetable[1])
            time.append(timetable[2])
        for i in range(14):
            bot.send_message(message.chat.id, f'{week[i]}\n{lesson[i]} {time[i]}', parse_mode='html')

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    else:
        bot.send_message(message.chat.id, f'–ò–∑–≤–∏–Ω–∏—Ç–µ, {name} —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é üò•', parse_mode='html')
    
        
@bot.callback_query_handler(func=lambda call:True)
def callback_inline(call):

    #–ò–ù–§–û–†–ú–ê–¶–ò–Ø –æ –≥—Ä—É–ø–ø–µ
    def group(call):
        chat_id = call.message.chat.id
        conn = sqlite3.connect(r'database/chats.db', check_same_thread=True)
        db = conn.cursor()
        db.execute(f"SELECT * from chats where id = '{chat_id}';")
        group = db.fetchone()[1]
        conn.close()
        return group


    # –ò–ù–§–û–†–ú–ê–¶–ò–Ø –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    def teacher(name, group):
        conn = sqlite3.connect(r'database/timetable.db', check_same_thread=True)
        db = conn.cursor()
        db.execute(f"SELECT * FROM lesson where name = '{name}';")
        lesson = db.fetchone()
        print(lesson)
        if lesson[2] == 'NONE':
            db.close()
            return lesson[2]
        else: 
            db.execute(f"SELECT * FROM teacher where name = '{lesson[2]}' and group_name = '{group}';")
            teacher = db.fetchone()
            db.close()
            return teacher



    # –ë–û–¢ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–ø–æ–¥–∞
    # def add_teacher()


    # –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    def insert_client(chat_id, group):
        conn = sqlite3.connect(r'database/chats.db', check_same_thread=True)
        db = conn.cursor()
        db.execute(f"UPDATE chats SET group_name = '{group}' where id = '{chat_id}';")
        conn.commit()
        conn.close()
        print(f"UPDATE chats SET group_name = '{group}' where id = '{chat_id}';")


    try:
        if call.message:
            if call.data == '2vbASU':
                chat_id = call.message.chat.id
                insert_client(chat_id=chat_id, group='2vbASU')
            elif call.data == '2vbITS':
                chat_id = call.message.chat.id
                insert_client(chat_id=chat_id, group='2vbITS')
            
            else: 
                lesson = call.data
                print(group(call))
                print(lesson)
                print(teacher(lesson, group(call)))
                if teacher(lesson, group(call)) == 'NONE':
                    s_sms = '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é —ç—Ç–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è üò¢'
                    bot.send_message(call.message.chat.id, s_sms)
                else:
                    teacher_data = teacher(lesson, group(call))
                    name = teacher_data[0]
                    j_title = teacher_data[1]
                    department = teacher_data[2]
                    url = teacher_data[3]

                    text = f'{name}\n{j_title}\n{department}\n'

                    photo = open(url, 'rb')
                    bot.send_photo(call.message.chat.id, photo, caption=text)

            # –ú–µ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–†–∞–±–æ—Ç–∞—é –Ω–∞–¥ –∑–∞–ø—Ä–æ—Å–æ–º...", reply_markup=None)
           

    except Exception as e:
        print(repr(e))





# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –æ—Å–Ω–æ–≤—É
bot.polling(none_stop=True)
